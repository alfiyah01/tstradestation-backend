// ========================================
// üÜï FILE: server-utils.js (VERSI LENGKAP)
// ========================================

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// ‚úÖ CENTRALIZED VALIDATION UTILITIES
const ValidationUtils = {
    email: {
        regex: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        
        isValid(email) {
            if (!email || typeof email !== 'string') return false;
            return this.regex.test(email.trim());
        },
        
        normalize(email) {
            return email ? email.toLowerCase().trim() : null;
        }
    },
    
    phone: {
        isValid(phone) {
            if (!phone || typeof phone !== 'string') return false;
            const cleanPhone = phone.trim().replace(/[\s\-\(\)\+]/g, '');
            const phoneRegex = /^(\+?628\d{8,11}|08\d{8,11})$/;
            return phoneRegex.test(cleanPhone);
        },
        
        normalize(phone) {
            if (!phone) return null;
            let cleaned = phone.replace(/[\s\-\(\)\+]/g, '');
            
            if (cleaned.startsWith('08')) {
                return '628' + cleaned.substring(2);
            }
            if (cleaned.startsWith('8') && cleaned.length >= 10) {
                return '62' + cleaned;
            }
            if (cleaned.startsWith('62')) {
                return cleaned;
            }
            return cleaned;
        }
    },
    
    password: {
        minLength: 6,
        isValid(password) {
            return password && password.length >= this.minLength;
        }
    },
    
    name: {
        minLength: 2,
        isValid(name) {
            return name && name.trim().length >= this.minLength;
        },
        normalize(name) {
            return name ? name.trim() : '';
        }
    }
};

// ‚úÖ CENTRALIZED RESPONSE UTILITIES
const ResponseUtils = {
    success(res, data, message = 'Success', statusCode = 200) {
        return res.status(statusCode).json({
            success: true,
            message,
            data,
            timestamp: new Date().toISOString()
        });
    },
    
    error(res, message, statusCode = 500, details = null) {
        const errorResponse = {
            success: false,
            error: message,
            timestamp: new Date().toISOString()
        };
        
        if (details && process.env.NODE_ENV === 'development') {
            errorResponse.details = details;
        }
        
        return res.status(statusCode).json(errorResponse);
    },
    
    validationError(res, errors) {
        return this.error(res, 'Validation failed', 400, {
            validationErrors: Array.isArray(errors) ? errors : [errors]
        });
    }
};

// ‚úÖ CENTRALIZED USER UTILITIES
const UserUtils = {
    async findByIdentifier(identifier, User) {
        if (!identifier) return null;
        
        let user = null;
        
        if (ValidationUtils.email.isValid(identifier)) {
            const email = ValidationUtils.email.normalize(identifier);
            user = await User.findOne({ email }).lean();
        }
        
        if (!user && ValidationUtils.phone.isValid(identifier)) {
            const phone = ValidationUtils.phone.normalize(identifier);
            user = await User.findOne({ phone }).lean();
        }
        
        return user;
    },
    
    async generateUniqueReferralCode(User) {
        let referralCode;
        let attempts = 0;
        const maxAttempts = 10;
        
        do {
            referralCode = Math.random().toString(36).substring(2, 8).toUpperCase();
            const existing = await User.findOne({ referralCode }).lean();
            attempts++;
            
            if (!existing) break;
            
        } while (attempts < maxAttempts);
        
        if (attempts >= maxAttempts) {
            throw new Error('Failed to generate unique referral code');
        }
        
        return referralCode;
    },
    
    async validateUniqueIdentifier(email, phone, User, excludeUserId = null) {
        const errors = [];
        
        if (email) {
            const query = { email: ValidationUtils.email.normalize(email) };
            if (excludeUserId) query._id = { $ne: excludeUserId };
            
            const existingEmail = await User.findOne(query).lean();
            if (existingEmail) {
                errors.push('Email sudah terdaftar dalam sistem');
            }
        }
        
        if (phone) {
            const query = { phone: ValidationUtils.phone.normalize(phone) };
            if (excludeUserId) query._id = { $ne: excludeUserId };
            
            const existingPhone = await User.findOne(query).lean();
            if (existingPhone) {
                errors.push('Nomor HP sudah terdaftar dalam sistem');
            }
        }
        
        return errors;
    }
};

// ‚úÖ CENTRALIZED ACTIVITY LOGGER
const ActivityLogger = {
    async log(userId, action, details = '', req = null, Activity) {
        try {
            const activityData = {
                userId,
                action,
                details,
                createdAt: new Date()
            };
            
            if (req) {
                activityData.ip = req.ip || req.connection?.remoteAddress;
                activityData.userAgent = req.get('User-Agent');
            }
            
            await Activity.create(activityData);
            console.log(`üìù Activity logged: ${action} - ${details}`);
        } catch (error) {
            console.error('‚ùå Error logging activity:', error);
        }
    }
};

// ‚úÖ BACKWARD COMPATIBILITY FUNCTIONS (untuk server.js lama)
function isValidEmail(email) {
    return ValidationUtils.email.isValid(email);
}

function isValidPhone(phone) {
    return ValidationUtils.phone.isValid(phone);
}

function normalizePhone(phone) {
    return ValidationUtils.phone.normalize(phone);
}

// ‚úÖ CURRENCY FORMATTER
function formatCurrency(amount) {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount || 0);
}

// ‚úÖ ACTIVITY LOGGER (backward compatibility)
async function logActivity(userId, action, details = '', req = null) {
    try {
        // Ini akan di-handle di server.js dengan Activity model
        const activityData = {
            userId,
            action,
            details,
            createdAt: new Date()
        };
        
        if (req) {
            activityData.ip = req.ip || req.connection?.remoteAddress;
            activityData.userAgent = req.get('User-Agent');
        }
        
        console.log(`üìù Activity logged: ${action} - ${details}`);
        return activityData; // Return data untuk diproses di server.js
    } catch (error) {
        console.error('‚ùå Error logging activity:', error);
    }
}

// ‚úÖ EXPORT SEMUA FUNCTIONS
module.exports = {
    ValidationUtils,
    ResponseUtils,
    UserUtils,
    ActivityLogger,
    // Backward compatibility functions
    isValidEmail,
    isValidPhone,
    normalizePhone,
    formatCurrency,
    logActivity
};
